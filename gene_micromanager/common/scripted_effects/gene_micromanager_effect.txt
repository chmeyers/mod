
# Remove every trait that we are willing to remove to leave a 
# clean slate for customization.
gene_micromanage_remove_traits = {
	modify_species = {
		species = this
		change_scoped_species = yes
		remove_trait = trait_adaptive_lithoid
		remove_trait = trait_rapid_breeders_lithoid
		remove_trait = trait_delicious
		remove_trait = trait_nerve_stapled
		remove_trait = trait_fertile
		remove_trait = trait_robust
		remove_trait = trait_erudite
		remove_trait = trait_vat_grown
		remove_trait = trait_felsic
		remove_trait = trait_natural_machinist
		remove_trait = trait_incubator
		remove_trait = trait_agrarian
		remove_trait = trait_ingenious
		remove_trait = trait_industrious
		remove_trait = trait_intelligent
		remove_trait = trait_thrifty
		remove_trait = trait_natural_engineers
		remove_trait = trait_natural_physicists
		remove_trait = trait_natural_sociologists
		remove_trait = trait_extremely_adaptive
		remove_trait = trait_adaptive
		remove_trait = trait_nonadaptive
		remove_trait = trait_rapid_breeders
		remove_trait = trait_slow_breeders
		remove_trait = trait_talented
		remove_trait = trait_quick_learners
		remove_trait = trait_slow_learners
		remove_trait = trait_traditional
		remove_trait = trait_quarrelsome
		remove_trait = trait_docile
		remove_trait = trait_unruly
		remove_trait = trait_very_strong
		remove_trait = trait_strong
		remove_trait = trait_weak
		remove_trait = trait_nomadic
		remove_trait = trait_sedentary
		remove_trait = trait_communal
		remove_trait = trait_solitary
		remove_trait = trait_charismatic
		remove_trait = trait_repugnant
		remove_trait = trait_conformists
		remove_trait = trait_deviants
		remove_trait = trait_venerable
		remove_trait = trait_enduring
		remove_trait = trait_fleeting
		remove_trait = trait_fleeting_lithoid
		remove_trait = trait_decadent
		remove_trait = trait_resilient
		remove_trait = trait_conservational
		remove_trait = trait_wasteful
	}
	# These have additional requirements
	if = {
		limit = {
			NOT = { owner = { has_ascension_perk = ap_hydrocentric } }
		}
		modify_species = {
			species = this
			change_scoped_species = yes
			remove_trait = trait_aquatic
		}
	}
	if = {
		limit = {
			owner = { has_technology = tech_plantoid_transgenesis }
		}
		modify_species = {
			species = this
			change_scoped_species = yes
			remove_trait = trait_advanced_radiotrophic
		}
	}
	# Remove Overtuned traits only if we can add them back.
	if = {
		limit = {
			owner = { has_origin = origin_overtuned }
		}
		modify_species = {
			species = this
			change_scoped_species = yes
			remove_trait = trait_spliced_adaptability
			remove_trait = trait_juiced_power
			remove_trait = trait_farm_hands
			remove_trait = trait_crack_miner
			remove_trait = trait_technical_skill
			remove_trait = trait_crafted_smiles
			remove_trait = trait_low_maintenance
			remove_trait = trait_artificial_intelligence
			remove_trait = trait_gene_mentorship
			remove_trait = trait_expressed_tradition
			remove_trait = trait_elevated_synapses
			remove_trait = trait_preplanned_growth
			remove_trait = trait_excessive_endurance
		}
	}
}

gene_micromanage_reset_habitability =  {
	if = {
		limit = {
			owner = { has_technology = tech_glandular_acclimation }
			NOT = { pop_has_trait = trait_pc_nuked_preference }
			NOT = { pop_has_trait = trait_pc_habitat_preference }
			NOT = { pop_has_trait = trait_aquatic }
			NOT = { pop_has_trait = trait_self_modified }
			NOT = { home_planet = { is_artificial = yes } }
			NOT = { home_planet = { is_ideal = yes } }
			NOT = { home_planet = { is_planet_class = pc_relic } }
			NOT = { home_planet = { is_planet_class = pc_machine } }
			NOT = { home_planet = { is_planet_class = pc_hive } }
			exists = home_planet
		}
		home_planet = { save_event_target_as = current_home_planet }
		modify_species = {
			species = this
			change_scoped_species = yes
			ideal_planet_class = event_target:current_home_planet
		}
	}
}

# Set their habitability
gene_micromanage_habitability =  {
	if = {
		limit = {
			owner = { has_technology = tech_glandular_acclimation }
			NOT = { pop_has_trait = trait_pc_nuked_preference }
			NOT = { pop_has_trait = trait_pc_habitat_preference }
			NOT = { pop_has_trait = trait_aquatic }
			NOT = { pop_has_trait = trait_self_modified }
			NOT = { planet = { is_artificial = yes } }
			NOT = { planet = { is_ideal = yes } }
			NOT = { planet = { is_planet_class = pc_relic } }
			NOT = { planet = { is_planet_class = pc_machine } }
			NOT = { planet = { is_planet_class = pc_hive } }
			NOT = { planet = { is_ideal_planet_class = { who = prev.species status = yes } } }
			planet = { habitability = { who = prev.species value < 1.0 } }
		}
		planet = { save_event_target_as = current_planet }
		modify_species = {
			species = this
			change_scoped_species = yes
			ideal_planet_class = event_target:current_planet
		}
	}
}

gene_micromanage_add_negatives = {
	# We are willing to add these negative traits if we need extra points
	# trait_repugnant -2 (only if they don't produce amenities and aren't charismatic)
	# trait_fleeting -1
	# trait_slow_learners -1
	# trait_solitary -1
	if = {
		limit = {
			# Don't add negatives if we don't have to.
			check_variable = { which = available_trait_points value < $WANT$ }
			# Never take the last pick with a negative trait.
			check_variable = { which = available_trait_picks value >= 2 }
			check_variable = { which = available_trait_picks value >= $WANT$ }
			# If we can't add repugnant, we need an extra pick
			OR = {
				check_variable = { which = available_trait_picks value > $WANT$ }
				AND = {
					pop_job_produces_amenities = no
					NOT = { pop_has_trait = trait_charismatic }
					NOT = { pop_has_trait = trait_repugnant }
				}
			}
		}
		# Figure out whether we can get enough points before actually adding any traits
		set_variable = { which = possible_trait_points value = available_trait_points }
		if = {
			limit = {
				pop_job_produces_amenities = no
				NOT = { pop_has_trait = trait_charismatic }
				NOT = { pop_has_trait = trait_repugnant }
			}
			change_variable = { which = possible_trait_points value = 2 }
		}
		if = {
			limit = { NOT = { pop_has_trait = trait_fleeting } }
			change_variable = { which = possible_trait_points value = 1 }
		}
		if = {
			limit = { NOT = { pop_has_trait = trait_slow_learners } }
			change_variable = { which = possible_trait_points value = 1 }
		}
		if = {
			limit = { NOT = { pop_has_trait = trait_solitary } }
			change_variable = { which = possible_trait_points value = 1 }
		}

		if = {
			limit = {
				check_variable = { which = possible_trait_points value >= $WANT$ }
			}
			# We can do it. Now actually add them.
			if = {
				limit = {
					pop_job_produces_amenities = no
					NOT = { pop_has_trait = trait_charismatic }
					NOT = { pop_has_trait = trait_repugnant }
				}
				modify_species = {
					species = this
					change_scoped_species = yes
					add_trait = trait_repugnant
				}
				change_variable = { which = available_trait_points value = 2 }
				subtract_variable = { which = available_trait_picks value = 1 }
			}
			if = {
				limit = {
					check_variable = { which = available_trait_points value < $WANT$ }
					NOT = { pop_has_trait = trait_fleeting }
				}
				modify_species = {
					species = this
					change_scoped_species = yes
					add_trait = trait_fleeting
				}
				change_variable = { which = available_trait_points value = 1 }
				subtract_variable = { which = available_trait_picks value = 1 }
			}
			if = {
				limit = {
					check_variable = { which = available_trait_points value < $WANT$ }
					NOT = { pop_has_trait = trait_slow_learners }
				}
				modify_species = {
					species = this
					change_scoped_species = yes
					add_trait = trait_slow_learners
				}
				change_variable = { which = available_trait_points value = 1 }
				subtract_variable = { which = available_trait_picks value = 1 }
			}
			if = {
				limit = {
					check_variable = { which = available_trait_points value < $WANT$ }
					NOT = { pop_has_trait = trait_solitary }
				}
				modify_species = {
					species = this
					change_scoped_species = yes
					add_trait = trait_solitary
				}
				change_variable = { which = available_trait_points value = 1 }
				subtract_variable = { which = available_trait_picks value = 1 }
			}
		}
		
	}
}

gene_micromanage_try_add = {
	if = {
		limit = { NOT = { has_trait = $TRAIT$ } }
		# Add negatives if needed.
		gene_micromanage_add_negatives = { WANT = $COST$ }
		if = {
			limit = {
				check_variable = { which = available_trait_points value >= $COST$ }
				check_variable = { which = available_trait_picks value >= 1 }
			}
			# Go ahead and add it.
			modify_species = {
				species = this
				change_scoped_species = yes
				add_trait = $TRAIT$
			}
			subtract_variable = { which = available_trait_points value = $COST$ }
			subtract_variable = { which = available_trait_picks value = 1 }
		}
	}
}

# Add traits back
gene_micromanage_add_traits = {
	# tomb_world   (trait_advanced_radiotrophic) 2 Also need Habitability!
	if = {
		limit = {
			planet = { is_planet_class = pc_nuked }
		}
		if = {
			limit = {
				host_has_dlc = "Plantoids Species Pack"
				OR = {
					owner = { has_technology = tech_plantoid_transgenesis }
					owner = { has_technology = tech_lithoid_transgenesis }
				}
				NOT = { pop_has_trait = trait_pc_nuked_preference }
				NOT = { pop_has_trait = trait_voidling }
				NOT = { pop_has_trait = trait_advanced_phototrophic }
				NOT = { is_species_class = PLANT }
				NOT = { is_species_class = FUN }
			}
			gene_micromanage_try_add = { TRAIT = trait_advanced_radiotrophic COST = 2 }
		}
		if = {
			limit = { planet = { habitability = { who = prev.species value < 0.8 } } }
			# Low Tomb World Habitability. Adding Habitability is more efficient than pretty
			# much any other changes and we can't just change their ideal planet type to Tomb World
			if = {
				limit = { owner = { has_origin = origin_overtuned } }
				gene_micromanage_try_add = { TRAIT = trait_excessive_endurance COST = 3 }
				if = {
					limit = { planet = { habitability = { who = prev.species value < 0.8 } } }
					gene_micromanage_try_add = { TRAIT = trait_spliced_adaptability COST = 1 }
				}
			}
			if = {
				limit = { is_lithoid = no }
				gene_micromanage_try_add = { TRAIT = trait_robust COST = 4 }
			}
		}
	}
	# ocean (trait_aquatic) 2
	if = {
		limit = {
			host_has_dlc = "Aquatics Species Pack"
			OR = {
				planet = { is_planet_class = pc_ocean }
				planet = { has_modifier = flooded_habitat }
			}
			OR = {
				planet = { habitability = { who = prev.species value < 0.81 } }
				has_job_category = worker
				is_unemployed = yes
			}
		}
		gene_micromanage_try_add = { TRAIT = trait_aquatic COST = 2 }
	}

	# livestock   trait_delicious/trait_felsic  2
	if = {
		limit = {
			has_citizenship_type = { type = citizenship_slavery }
			OR = {
				has_slavery_type = { type = slavery_livestock }
				has_slavery_type = { type = slavery_matrix }
			}
		}
		if = {
			limit = { is_lithoid = yes }
			gene_micromanage_try_add = { TRAIT = trait_felsic COST = 2 }
		}
		else = {
			gene_micromanage_try_add = { TRAIT = trait_delicious COST = 2 }
		}
	}

	# research_(all/some?)   trait_erudite (trait_elevated_synapses, trait_artificial_intelligence) (trait_natural_sociologists/physicists/engineers) 4 + (2 + 1) + (1)
	# unity   trait_traditional (trait_expressed_tradition) 1 + (1)
	# alloys   trait_natural_machinist   2
	# consumer_goods   trait_natural_machinist   2
	# minerals   trait_industrious  (trait_crack_miner) 2 + (1)
	# energy   trait_ingenious  (trait_technical_skill) 2 + (1)
	# food   trait_agrarian  (trait_farm_hands) 2 + (1)
	# trade_value   trait_thrifty   2
	# amenities   trait_charismatic (trait_crafted_smiles) 2 + (1)

	# worker    trait_very_strong (trait_juiced_power) 3 + (1)
	# slave worker    trait_nerve_stapled  3
	# all_job    trait_robust (trait_excessive_endurance) 4 + (3)
	# growth    trait_fertile/trait_rapid_breeders trait_nomadic (trait_preplanned_growth, trait_incubator)  4/2 + 1 + (2)
	# other    trait_docile trait_conservationist (trait_low_maintenance)  2 + 1 + (1)
}

# Count the number of trait points and picks available for this pop and
# save them to variables.
gene_micromanage_count_traits = {
	# 2 + BIOLOGICAL_species_trait_points_add + 1 if half_species
	export_modifier_to_variable = {
		modifier = BIOLOGICAL_species_trait_points_add
		variable = available_trait_points
	}
	change_variable = { which = available_trait_points value = 2 }
	# 5 + BIOLOGICAL_species_trait_picks_add + 1 if half_species
	export_modifier_to_variable = {
		modifier = BIOLOGICAL_species_trait_picks_add
		variable = available_trait_picks
	}
	change_variable = { which = available_trait_picks value = 5 }
	if = {
		limit = { species = { is_half_species = any } }
		change_variable = { which = available_trait_points value = 1 }
		change_variable = { which = available_trait_picks value = 1 }
	}
	# TODO(chmeyers): Remove the ones already being used!
	subtract_variable = { which = available_trait_points value = trigger:num_trait_points }
	# zero-cost traits don't count against trait picks, but there doesn't seem to be a way to
	# count them without having a hardcoded list of all the traits, so instead I'm assuming that
	# one trait pick is used for each two trait points. This seems mostly fair since the traits
	# that we don't remove in vanilla tend to be 2-3 points each.
	export_trigger_value_to_variable = { trigger = num_trait_points variable = used_trait_picks }
	divide_variable = { which = used_trait_picks value = 2 }
	ceiling_variable = used_trait_picks
	subtract_variable = { which = available_trait_picks value = used_trait_picks }
}

# Effect to micromanage the genes of the scoped pop
gene_micromanage_pop = {
	if = {
		limit = {
			NOT = { pop_has_trait = trait_self_modified }
		}
		# Remove all the traits that we are willing to remove.
		gene_micromanage_remove_traits = yes

		# Reset habitability to the species baseline. This is just so that
		# we don't have unnecessarily different habitabilities in the subspecies list
		# when they would end up with 100% habitability anyways.
		gene_micromanage_reset_habitability = yes

		# Count how many picks and points we have available.
		gene_micromanage_count_traits = yes

		# Pick traits.
		if = {
			limit = {
				check_variable = { which = available_trait_points value > 0 }
				check_variable = { which = available_trait_picks value > 0 }
				is_sapient = yes
			}
			gene_micromanage_add_traits = yes
		}

		# Set ideal habitability if we aren't already at 100%.
		gene_micromanage_habitability = yes
	}
}