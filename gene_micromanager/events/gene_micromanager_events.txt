namespace = gene_micromanager_mod

# Edict Enabled
country_event = {
	id = gene_micromanager_mod.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		# Called the first time when the edict is enabled, but we have to check for disablement
		has_edict = gene_micromanager
	}

	immediate = {
		export_trigger_value_to_variable = { trigger = genemod_num_organic_pops variable = num_pops_to_alter }
		divide_variable = { which = num_pops_to_alter value = 120 }
		ceiling_variable = num_pops_to_alter
		while = {
			count = num_pops_to_alter
			random_owned_pop = {
				limit = {
					NOT = { has_pop_flag = gene_micromanaged }
					species = { is_robotic = no }
				}
				gene_micromanage_pop = yes
				set_pop_flag = gene_micromanaged
			}
		}
		if = {
			limit = {
				NOT = { any_owned_pop = {
						NOT = { has_pop_flag = gene_micromanaged }
						species = { is_robotic = no }
				} }
			}
			# No pops haven't been micromanaged yet. Clear all the flags and start a new pass.
			every_owned_pop = {
				remove_pop_flag = gene_micromanaged
			}
		}

		# Loop back to do the next pop.
		country_event = { id = gene_micromanager_mod.1 days = 30 }
	}
}

# Leader Policy First Enabled or Leader Assigned.
country_event = {
	id = gene_micromanager_mod.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_policy_flag = leader_enhancement_custom_genesculpting
	}

	immediate = {
		every_owned_leader = {
			limit = {
				NOT = { has_leader_flag = genemod_sculpted }
				species = {
					is_robotic = no
					NOT = { has_trait = trait_mechanical }
				}
			}
			set_leader_flag = genemod_sculpted
			if = {
				limit = { species = { NOT = { has_trait = trait_erudite } } }
				modify_species = {
					add_trait = trait_erudite # Cost 4
				}
			}
			if = {
				limit = { species = { NOT = { has_trait = trait_robust } } }
				modify_species = {
					add_trait = trait_robust # Cost 4
				}
			}
			if = {
				limit = { species = { NOT = { has_trait = trait_venerable } } }
				modify_species = {
					add_trait = trait_venerable # Cost 4
				}
			}
			if = {
				limit = { species = { NOT = { has_trait = trait_quick_learners } } }
				modify_species = {
					add_trait = trait_quick_learners # Cost 1
				}
			}
			if = {
				limit = { species = { NOT = { has_trait = trait_talented } } }
				modify_species = {
					add_trait = trait_talented # Cost 1
				}
			}
			#traits_exotic_metabolism would add 50 age, too, but requires the toxoids pack.
		}
		# Same thing for pool leaders
		every_pool_leader = {
			limit = {
				NOT = { has_leader_flag = genemod_sculpted }
				species = {
					is_robotic = no
					NOT = { has_trait = trait_mechanical }
				}
			}
			set_leader_flag = genemod_sculpted
			if = {
				limit = { species = { NOT = { has_trait = trait_erudite } } }
				modify_species = {
					add_trait = trait_erudite # Cost 4
				}
			}
			if = {
				limit = { species = { NOT = { has_trait = trait_robust } } }
				modify_species = {
					add_trait = trait_robust # Cost 4
				}
			}
			if = {
				limit = { species = { NOT = { has_trait = trait_venerable } } }
				modify_species = {
					add_trait = trait_venerable # Cost 4
				}
			}
			if = {
				limit = { species = { NOT = { has_trait = trait_quick_learners } } }
				modify_species = {
					add_trait = trait_quick_learners # Cost 1
				}
			}
			if = {
				limit = { species = { NOT = { has_trait = trait_talented } } }
				modify_species = {
					add_trait = trait_talented # Cost 1
				}
			}
			
		}
	}
}

# Leader Policy Disabled
country_event = {
	id = gene_micromanager_mod.3
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_policy_flag = leader_enhancement_custom_genesculpting }
	}

	immediate = {
		every_owned_leader = {
			limit = { has_leader_flag = genemod_sculpted }
			save_event_target_as = genmod_sculpt_undo
			owner = {
				if = {
					limit = {
						any_owned_species = {
							is_same_species = event_target:genmod_sculpt_undo.species
							has_trait = trait_erudite
						}
					}
					# They own a matching species with erudite, use that one.
					random_owned_species = {
						limit = {
							is_same_species = event_target:genmod_sculpt_undo.species
							has_trait = trait_erudite
						}
						event_target:genmod_sculpt_undo = {
							change_species = prev
							remove_leader_flag = genemod_sculpted
						}
					}
				}
				else_if = {
					limit = {
						any_owned_species = {
							is_same_species = prevprev.species
						}
					}
					# Take whatever.
					event_target:genmod_sculpt_undo = {
						change_species = prev
						remove_leader_flag = genemod_sculpted
					}
				}
				# Else: They don't own any pops of the leader's species.
				# What luck. They will stay as they are.
			}
			
		}
		# Same thing with the pool leaders
		every_pool_leader = {
			limit = { has_leader_flag = genemod_sculpted }
			save_event_target_as = genmod_sculpt_undo
			owner = {
				if = {
					limit = {
						any_owned_species = {
							is_same_species = event_target:genmod_sculpt_undo.species
							has_trait = trait_erudite
						}
					}
					# They own a matching species with erudite, use that one.
					random_owned_species = {
						limit = {
							is_same_species = event_target:genmod_sculpt_undo.species
							has_trait = trait_erudite
						}
						event_target:genmod_sculpt_undo = {
							change_species = prev
							remove_leader_flag = genemod_sculpted
						}
					}
				}
				else_if = {
					limit = {
						any_owned_species = {
							is_same_species = prevprev.species
						}
					}
					# Take whatever.
					event_target:genmod_sculpt_undo = {
						change_species = prev
						remove_leader_flag = genemod_sculpted
					}
				}
				# Else: They don't own any pops of the leader's species.
				# What luck. They will stay as they are.
			}
			
		}
	}
	
}